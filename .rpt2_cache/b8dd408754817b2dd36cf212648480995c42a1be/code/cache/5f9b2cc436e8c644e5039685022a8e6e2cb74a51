{"code":"import * as tslib_1 from \"tslib\";\r\nimport { h } from 'preact';\r\nimport { DEFAULT_CTX_PROPERTY } from './config';\r\nvar prepareChildren = function (child, state, actions, isMerged) {\r\n    if (isMerged === void 0) { isMerged = false; }\r\n    if (typeof child === 'string') {\r\n        return child;\r\n    }\r\n    if (typeof child === 'function') {\r\n        if (isMerged) {\r\n            return child(state) || null;\r\n        }\r\n        return child(state, actions) || null;\r\n    }\r\n    var nodeName = child.nodeName, attributes = child.attributes, children = child.children;\r\n    if (typeof nodeName === 'string') {\r\n        return child;\r\n    }\r\n    if (attributes && attributes.preventApplyingProps) {\r\n        return child;\r\n    }\r\n    var mergedAttributes = isMerged\r\n        ? tslib_1.__assign({ state: state, actions: actions }, attributes) : tslib_1.__assign({}, state, attributes);\r\n    return h(nodeName, mergedAttributes, children);\r\n};\r\nfunction extractStateAndActions(property, context) {\r\n    if (property === void 0) { property = DEFAULT_CTX_PROPERTY; }\r\n    if (Array.isArray(property)) {\r\n        return property.reduce(function (pv, cv) {\r\n            var _a = context[cv] || { state: {}, actions: {} }, state = _a.state, actions = _a.actions;\r\n            return {\r\n                actions: tslib_1.__assign({}, pv.actions, (_b = {}, _b[cv] = actions, _b)),\r\n                state: tslib_1.__assign({}, pv.state, (_c = {}, _c[cv] = state, _c))\r\n            };\r\n            var _b, _c;\r\n        }, { state: {}, actions: {} });\r\n    }\r\n    return context[property] || { state: {}, actions: {} };\r\n}\r\nfunction transformStateAndActions(_a, mapStateToProps, mapActionsToProps) {\r\n    var state = _a.state, actions = _a.actions;\r\n    var hasMappingFns = typeof mapStateToProps === 'function' ||\r\n        typeof mapActionsToProps === 'function';\r\n    if (!hasMappingFns) {\r\n        return { state: state, actions: actions };\r\n    }\r\n    var mergedState = {};\r\n    if (typeof mapStateToProps === 'function') {\r\n        mergedState = tslib_1.__assign({}, mergedState, mapStateToProps(state));\r\n    }\r\n    else if (mapStateToProps === true) {\r\n        mergedState = tslib_1.__assign({}, mergedState, state);\r\n    }\r\n    if (typeof mapActionsToProps === 'function') {\r\n        mergedState = tslib_1.__assign({}, mergedState, mapActionsToProps(actions, state));\r\n    }\r\n    else if (mapActionsToProps === true) {\r\n        mergedState = tslib_1.__assign({}, mergedState, { actions: actions });\r\n    }\r\n    return { state: mergedState, isMerged: true };\r\n}\r\nexport { prepareChildren, extractStateAndActions, transformStateAndActions };\r\n","map":{"mappings":""},"dts":{"name":"/Users/R/code/contextual/utils.d.ts","text":"import { VNode } from 'preact';\r\nexport declare type VNodeFn = (state: any, action?: any) => VNode;\r\ndeclare const prepareChildren: (child: string | VNode<any> | VNodeFn, state: any, actions: any, isMerged?: boolean) => string | VNode<any>;\r\nexport interface IStateAndActions {\r\n    actions: any;\r\n    state: any;\r\n}\r\ndeclare function extractStateAndActions(property: string | string[], context: object): IStateAndActions;\r\nexport declare type MapStateFn = (state: any) => object;\r\nexport declare type MapActionFn = (actions: any, state: any) => object;\r\ndeclare function transformStateAndActions({state, actions}: IStateAndActions, mapStateToProps: MapStateFn | true | null, mapActionsToProps: MapActionFn | true | null): {\r\n    state: any;\r\n    actions: any;\r\n    isMerged?: undefined;\r\n} | {\r\n    state: object;\r\n    isMerged: boolean;\r\n    actions?: undefined;\r\n};\r\nexport { prepareChildren, extractStateAndActions, transformStateAndActions };\r\n"}}

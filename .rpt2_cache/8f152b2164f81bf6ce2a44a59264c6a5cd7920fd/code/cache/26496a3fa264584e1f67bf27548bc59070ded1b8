{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Component } from 'preact';\r\nimport { DEFAULT_CTX_PROPERTY } from './config';\r\nvar Provider = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Provider, _super);\r\n    function Provider() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.displayName = \"Provider\";\r\n        return _this;\r\n    }\r\n    Provider.prototype.getChildContext = function () {\r\n        var name = this.props.name || DEFAULT_CTX_PROPERTY;\r\n        return _a = {},\r\n            _a[name] = {\r\n                actions: this.props.actions || {},\r\n                state: this.props.state || {}\r\n            },\r\n            _a;\r\n        var _a;\r\n    };\r\n    Provider.prototype.render = function () {\r\n        return this.props.children[0] || null;\r\n    };\r\n    return Provider;\r\n}(Component));\r\nexport { Provider };\r\n","map":{"mappings":""},"dts":{"name":"/Users/R/code/contextual/Provider.d.ts","text":"import { Component, VNode } from 'preact';\r\nexport interface IProviderProps {\r\n    name?: string;\r\n    actions?: any;\r\n    state?: any;\r\n    children: VNode[];\r\n}\r\ndeclare class Provider extends Component<IProviderProps> {\r\n    displayName: string;\r\n    getChildContext(): {\r\n        [x: string]: {\r\n            actions: any;\r\n            state: any;\r\n        };\r\n    };\r\n    render(): VNode<any> & JSX.Element;\r\n}\r\nexport { Provider };\r\n"}}

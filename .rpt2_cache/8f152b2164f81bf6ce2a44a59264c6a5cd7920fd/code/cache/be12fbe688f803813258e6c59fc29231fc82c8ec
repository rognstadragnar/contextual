{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Component, h } from 'preact';\r\nimport { extractStateAndActions, prepareChildren, transformStateAndActions } from './utils';\r\nvar Consumer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Consumer, _super);\r\n    function Consumer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.displayName = \"Consumer\";\r\n        return _this;\r\n    }\r\n    Consumer.prototype.render = function () {\r\n        var _a = this.props, mapStateToProps = _a.mapStateToProps, mapActionsToProps = _a.mapActionsToProps, fragment = _a.fragment, children = _a.children, consumes = _a.consumes;\r\n        if (!children[0]) {\r\n            return null;\r\n        }\r\n        var _b = transformStateAndActions(extractStateAndActions(consumes, this.context), mapStateToProps, mapActionsToProps), _c = _b.state, state = _c === void 0 ? {} : _c, _d = _b.actions, actions = _d === void 0 ? {} : _d, _e = _b.isMerged, isMerged = _e === void 0 ? false : _e;\r\n        var readyChildren = children.map(function (child) {\r\n            return prepareChildren(child, state, actions, isMerged);\r\n        });\r\n        if (fragment) {\r\n            return typeof fragment === 'function'\r\n                ? fragment(readyChildren)\r\n                : h(fragment, {}, readyChildren);\r\n        }\r\n        if (readyChildren.length === 1) {\r\n            return readyChildren[0];\r\n        }\r\n        return h('span', {}, readyChildren);\r\n    };\r\n    return Consumer;\r\n}(Component));\r\nexport { Consumer };\r\n","map":{"mappings":""},"dts":{"name":"/Users/R/code/contextual/Consumer.d.ts","text":"import { Component, VNode } from 'preact';\r\nexport declare type FragmentFunction = (children: any[]) => any;\r\nexport interface IConsumerProps {\r\n    mapStateToProps?: () => any;\r\n    mapActionsToProps?: () => any;\r\n    fragment?: string | FragmentFunction;\r\n    children: Array<VNode<any> | string>;\r\n    consumes?: string | string[];\r\n}\r\ndeclare class Consumer extends Component<IConsumerProps> {\r\n    displayName: string;\r\n    render(): any;\r\n}\r\nexport { Consumer };\r\n"}}
